查看文章
 
XJOJ209递增序列
2009年09月20日 星期日 01:24
递增序列
Time Limit:1000ms   Memory Limit:65535KB
Description

蓝猫7号写下了一列非负整数，他看了一下，数乱七八糟的，于是，他想改变一些数，使得序列变成一个严格递增的非负整数序列。
然而，蓝猫7号不想把整数序列中的数改得太大。于是，他希望在改变的数最少的情况下，最后所有数的和最小。
Input

输入的第一行有一个正整数n，1≤n≤10000，表示序列的长度。
以下n行，每一行一个非负整数从前往后描述这个序列，序列中的每个数都不超过10^9。
Output

输出仅有两个整数，两个正整数间用空格分开。
第一个整数表示最少需要改变的数的个数，第二个整数表示改变后序列的所有数的总和。
Sample Input

6
8
1
3
9
1
9
Sample Output

3 22
Hint

最后的序列变成了0 1 3 4 5 9。

======================================================
这道题目其实不难，却让我纠结了半天，还是因为我手太生了，总是想不好思路就开始敲代码。另外，oj上的数据是错误的，害我一直在考虑为什么WA了，最终在网上找了个程序，证实了我的程序的正确性。其实，看过这道题目，很容易让人想到lis，借鉴lis的O(nlogn)算法的思想，就可以解决这道题目了，不过这道题却不能二分了，但当f[i-1, j]无解时，f[i-1,k](k<j)均无解，通过这个结论就可以适当的剪枝优化一下了，对于10000的极限，440ms即可通过～

code：
 #include <cstdio>
#include <cstring>
#define MaxN 10001
#define MaxM 1000000001


int f[MaxN], n, m, tem;
long long sum, p[MaxN];

int main()
{
 memset(f, 0xff, sizeof(f));
 scanf("%d%d", &n, &m);
 f[1] = 0;
 f[0] = m;
 p[1] = 0;
 p[0] = m;

 for (int i = 1; i < n; ++i)
 {
  scanf("%d", &m);
  f[i+1] = f[i]+1;
  p[i+1] = p[i]+f[i+1];
  for (int j = i; j > 0; --j)
  {
   if (f[j] == -1) break;
   tem = MaxM;
   if (f[j] != -1 && f[j] < m)
   {
    tem = m;
    sum = p[j];
   }
   if (f[j-1] != -1 && tem > f[j-1]+1)
   {
    tem = f[j-1]+1;
    sum = p[j-1];
   }
   if (tem != MaxM)
   {
    f[j] = tem;
    p[j] = sum+tem;
   }
   else
    f[j] = -1;
  }
  if (f[0] != -1 && f[0] < m)
  {
   f[0] = m;
   p[0] += m;
  }
  else
   f[0] = -1;
        /*
        for (int i = 0; i < n; ++i)
            printf("%3d", f[i]);
        printf("\n");
        for (int i = 0; i < n; ++i)
            printf("%3d", p[i]);
        printf("\n");
        */
 }
 m = 0;
 while (f[m++] == -1);
 printf("%d %lld\n", m-1, p[m-1]);
 return 0;
}

类别：pal・icpc |  | 添加到搜藏 | 分享到i贴吧 | 浏览(130) | 评论 (0)
 
上一篇：紧急通知    下一篇：Ural1658 Sum of Digits
 
最近读者：
					
zhangciwu	texness0100	75249	漩涡の鸟人	cjf00000	
 
网友评论：
发表评论：
姓　名：	cowtony
内　容：	
插入表情

验证码：	 请点击后输入四位验证码，字母不区分大小写
 	    
