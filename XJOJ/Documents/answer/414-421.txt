发信人: tsuni (tsuni), 信区: ACM_ICPC 
标  题: 热身赛题解 
发信站: 兵马俑BBS (Mon Aug 16 20:24:02 2010), 本站(bbs.xjtu.edu.cn) 

414 All Discs Considered 

The key observation is that one starts either with the first DVD or with the second DVD. For both cases, the installation process is simulated. Each simulation proceeds by maintaining two queues to store those packages from both discs that may be installed because all dependent packages have already been dealt with. 

415 Boolean Logic 

Parse the input according to the specified grammar. Identify the proposition symbols and their positions. Generate all assignments by backtracking or a brute-force approach. For each assignment, evaluate all subformulas and output the result, correctly formatted. Although this solution is relatively straight-forward, the constructed program is quite complex and long. 

416 Code 

Imagine the finite state machine that controls the safe lock. You can view it as a directed graph with 10n-1 nodes, one for each state. Every node has 10 outbound edges, one for each possible key press. 

Every sequence of k key presses, where k>=n-1, entered to the lock corresponds to a path of length k-(n-1) in the directed graph. The first n-1 key presses determine the start node, and every following key press adds an edge to the path. 

A sequence of key presses that contains each n-digit sequence corresponds to a path that traverses every edge of the directed graph at least once. The problem statement asserts the existence of a sequence of length 10n+n-1 that corresponds to a path of length 10n. This means that there is a path that traverses every edge of the directed graph exactly once. 

Since every node of the directed graph has the same in-degree as its out-degree (viz. 10) such a path is actually a circle, a so called Euler tour. Indeed, the existence of an Euler tour is granted by virtue of this special structure of the directed graph, too. 

Therefore, all that has to be done is to find an Euler tour. This can be accomplished by a depth-first traversal in the directed graph. 


---
※ 来源:．兵马俑BBS http://bbs.xjtu.edu.cn [FROM: 117.22.0.129] 
 
top 
No. 1 本篇全文 回复本文 回信给作者 本篇作者: tsuni 本篇星级: 0 评价人数: 0  
发信人: tsuni (tsuni), 信区: ACM_ICPC 
标  题: Re: 热身赛题解 
发信站: 兵马俑BBS (Mon Aug 16 20:28:25 2010), 本站(bbs.xjtu.edu.cn) 

418 Run Length Encoding 

The input file is processed line by line. Every line is processed by a loop that checks if a sequence of consecutive repetitions starts at the current position. If this is the case, the length of the repetition is calculated up to a maximal length of 9 characters, and its encoding is output. Otherwise, the next sequence of consecutive repetitions, if any, is located and the intermediate characters are encoded and output. This procedure is continued until the end of the line is reached. 

419 Fractran 

It is not difficult to code the simulation using arbitrary-precision integers, but the numbers can get pretty large and the operations then take too much time. Every integer number, however, has a unique representation through its prime factorisation. The necessary operations to perform the simulation are then easily implemented. For example, multiplication and division boil down to addition and subtraction of corresponding exponents. The Sieve of Eratosthenes can be used to calculate the prime numbers. 

All the prime numbers that will have to be handled in a simulation must be prime factors of numbers given in the input. Since theses numbers are bounded by 1000 just prime factors less than 1000 will occur, and there are 168 of them. It follows also that a number occurring in one of the fractions can have at most 4 different prime factors, whereas the current state of the computation may have many more. It is, therefore, efficient to store the current state of the computation as an array of integers denoting the exponents corresponding to all prime factors less than 1000, and numerators and denominators as lists containing only the occurring prime factors. Testing if the current state is a power of 2 is efficiently performed by additionally caching the total number of primes in its factorisation. 

420 Huffman's Greed 

Due to the lexicographic ordering, any sub-tree must contain a continuous sequence of labels Ki,Ki+1,...,Ki+d. The cost of arranging these keys in a tree depends only on the probabilities qi,pi+1,qi+1,...,pi+d,qi+d. This calls for a dynamic programming approach where each of the labels Ki,...,Ki+d is tried as the root of the tree. If, e.g., Kk is the root, the labels Ki,...,Kk-1 must be placed into the left sub-tree, and the labels Kk+1,...,Ki+d must go into the right sub-tree. The arising sub-problems are, by dynamic programming, already solved. The cost of arranging the labels in a tree is calculated from the costs of the sub-trees plus a certain constant amount (since the levels of the nodes in the sub-trees increase by 1, and the root is added). 

This approach leads to a runtime of O(n3), fast enough for n<=200. See the reference for an improvement to O(n2). 

421 Binary Search Heap Construction 

Since the labels and the priorities are unique, there is exactly one treap for every test case. It is constructed in a straight-forward way as follows. Find the node with the greatest priority, which will become the root of the treap. Split the remaining nodes into two sets: those with labels less than that of the root and those with labels greater than that of the root. From the first/second set of nodes construct the left/right sub-treap by applying this strategy recursively. If the set of nodes is empty, we have reached a leaf, and the recursion terminates. 

In a straight-forward implementation using lists we need linear time to find the maximum priority node and linear time to split the set of nodes, too. Therefore, in the worst case, we get a runtime of O(n2), too slow for values of n up to 50000. Compare this, e.g., to the worst case of the quicksort algorithm. 

We may, however, reduce the amount of time needed to split the set of nodes by sorting them (using an O(n*log(n)) complexity algorithm) according to their labels in the beginning. Then, the kind of subset of nodes needed for our procedure is represented by an interval indicating the smallest and the greatest element. In each recursive step, an interval is split into two sub-intervals. Still, we need linear time to find the maximum priority in such an interval, leaving us with a quadratic worst-case-time. 

We can find the maximum priority in logarithmic time by augmenting the list of elements with an order-statistic tree. To this end, we build a complete binary tree large enough to hold n numbers (the priorities) at its bottom level. Every internal node is marked with the maximum of the priorities below that node. Such a tree can be constructed in linear time in a bottom-up fashion. With this additional information, we no longer need to scan through a complete interval in search of the maximum priority but can use the combined maximum numbers stored in the internal nodes. Thus, we are able to find the maximum priority in logarithmic time by a bottom-up search in the order-statistic tree from both ends of the interval. We then add a top-down search to find the element of the interval having that priority. Hence, the total runtime of our algorithm is O(n*log(n)). 

Judges' test data consists of 14 hand-crafted test cases, 50 randomly generated test cases, and 3 large test cases (one of which is randomly generated). 

---
※ 来源:．兵马俑BBS http://bbs.xjtu.edu.cn [FROM: 117.22.0.129] 
 
top 
No. 2 本篇全文 回复本文 回信给作者 本篇作者: liuche 本篇星级: 0 评价人数: 0  
发信人: liuche (WHH|刘阿氓), 信区: ACM_ICPC 
标  题: Re: 热身赛题解 
发信站: 兵马俑BBS (Mon Aug 16 20:30:37 2010), 本站(bbs.xjtu.edu.cn) 


English~！ 

【 在 tsuni 的大作中提到: 】 
: Problem A: All Discs Considered 
: 
: The key observation is that one starts either with the first DVD or with the second DVD. For both cases, the installation process is simulated. Each simulation proceeds by maintaining two queues to store those packages from both discs that may be installed because all dependent packages have already been dealt with. 
: 


---
※ 来源:．兵马俑BBS http://bbs.xjtu.edu.cn [FROM: 115.154.114.29] 
 
top 
No. 3 本篇全文 回复本文 回信给作者 本篇作者: tsuni 本篇星级: 0 评价人数: 0  
发信人: tsuni (tsuni), 信区: ACM_ICPC 
标  题: Re: 热身赛题解 
发信站: 兵马俑BBS (Mon Aug 16 20:31:04 2010), 本站(bbs.xjtu.edu.cn) 

谁能看懂F题，讲讲 

 
