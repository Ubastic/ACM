#include <iostream>
#include <cstdio>
#include <cstring>
#include <set>
#include <map>

using namespace std;

int N;
int num[215][105];

int main()
{
    memset(num,0,sizeof(num));
    int i,j,k,t1,t2,t3;
    scanf("%d",&N);
    set<int> **blanks;
    set<int>::iterator ii;
    blanks=new set<int>* [2*N];
    for (i=1;i!=N+1;++i)
    {
        blanks[i]=new set<int> [i+1];
    }
    for (i=N+1;i!=2*N;++i)
    {
        blanks[i]=new set<int> [2*N-i+1];
    }
    for (i=1;i!=N+1;++i)
    {
        for (j=1;j!=i+1;++j)
        {
            scanf("%d",&num[i][j]);
        }
    }
    for (i=N+1;i!=2*N;++i)
    {
        for (j=1;j!=2*N-i+1;++j)
        {
            scanf("%d",&num[i][j]);
        }
    }
    blanks[1][1].insert(num[1][1]);
    blanks[1][1].insert((-1)*num[1][1]);
    for (i=2;i!=N+1;++i)
    {
        for (j=1;j!=i+1;++j)
        {
            if (j>1)
            {
                for (ii=blanks[i-1][j-1].begin();ii!=blanks[i-1][j-1].end();++ii)
                {
                    blanks[i][j].insert((*ii)+num[i][j]);
                    blanks[i][j].insert((*ii)-num[i][j]);
                }
            }
            if (j<i)
            {
                for (ii=blanks[i-1][j].begin();ii!=blanks[i-1][j].end();++ii)
                {
                    blanks[i][j].insert((*ii)+num[i][j]);
                    blanks[i][j].insert((*ii)-num[i][j]);
                }
            }
        }
    }
    for (i=N+1;i!=2*N;++i)
    {
        for (j=1;j!=2*N-i+1;++j)
        {
            for (ii=blanks[i-1][j].begin();ii!=blanks[i-1][j].end();++ii)
            {
                blanks[i][j].insert((*ii)+num[i][j]);
                blanks[i][j].insert((*ii)-num[i][j]);
            }
            for (ii=blanks[i-1][j+1].begin();ii!=blanks[i-1][j+1].end();++ii)
            {
                blanks[i][j].insert((*ii)+num[i][j]);
                blanks[i][j].insert((*ii)-num[i][j]);
            }
        }
    }
    i=0;
    while (blanks[2*N-1][1].find(i)==blanks[2*N-1][1].end() && blanks[2*N-1][1].find(-i)==blanks[2*N-1][1].end())
    {
        ++i;
    }
    printf("%d\n",i);
    return 0;
}