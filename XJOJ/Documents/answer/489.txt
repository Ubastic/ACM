#include <iostream>
#include <cstdio>
#include <cstring>
#include <queue>

using namespace std;

struct point
{
    int nn;
    int reach;
    int if_b;
    int kind;  //0->.  1-># 2->X  4->E
};

struct state
{
    int r,x1,x2;
    state ():r(0),x1(0),x2(0) {}
    state(int r,int x1=0,int x2=0): r(r),x1(x1),x2(x2) {}
};

int mins[105][105][105];
point map[55][55];
int free_nn;
int w,h,n;
int sx,sy,bn,xn,ex,ey;
int xx[20],xy[20],bx[105],by[105];
int nx[105],ny[105];
queue<state> que;

int check(int* txx,int* txy)
{
    int i,j,k,t1,t2,t3;
    t1=0;
    for (i=0;i!=xn;++i)
    {
        if (map[txx[i]][txy[i]].if_b==1) ++t1;
    }
    if (t1==bn) return 1;
    return 0;
}

int BFS()
{
    int i,j,k,t1,t2,t3;
    int tx,ty,txx[5],txy[5];
    while (!que.empty()) que.pop();
    que.push(state(map[sx][sy].nn,map[xx[0]][xy[0]].nn,map[xx[1]][xy[1]].nn));
    mins[map[sx][sy].nn][map[xx[0]][xy[0]].nn][map[xx[1]][xy[1]].nn]=0;
    while (!que.empty())
    {
        tx=nx[que.front().r];
        ty=ny[que.front().r];
        txx[0]=nx[que.front().x1];
        txy[0]=ny[que.front().x1];
        txx[1]=nx[que.front().x2];
        txy[1]=ny[que.front().x2];
        //printf("%d,%d %d,%d %d,%d ",tx,ty,nx[que.front().x1],ny[que.front().x1],nx[que.front().x2],ny[que.front().x2]);system("pause");
        for (i=0;i!=xn;++i)
        {
            map[txx[i]][txy[i]].kind=2;
        }
        if (map[tx-1][ty].reach==1 || (check(txx,txy) && map[tx-1][ty].kind==4))
        {
            if (check(txx,txy) && map[tx-1][ty].kind==4) return mins[que.front().r][que.front().x1][que.front().x2]+1;
            for (i=0;i!=xn;++i)
            {
                if (txx[i]==tx-1 && txy[i]==ty)
                {
                    break;
                }
            }
            if (i==xn)
            {
                if (mins[map[tx-1][ty].nn][que.front().x1][que.front().x2]==-1)
                {
                    mins[map[tx-1][ty].nn][que.front().x1][que.front().x2]=mins[que.front().r][que.front().x1][que.front().x2]+1;
                    que.push(state(map[tx-1][ty].nn,que.front().x1,que.front().x2));
                }
            }
            else if (i==0)
            {
                if (map[tx-2][ty].reach==1 && map[tx-2][ty].kind!=2 && mins[map[tx-1][ty].nn][map[tx-2][ty].nn][que.front().x2]==-1)
                {
                    mins[map[tx-1][ty].nn][map[tx-2][ty].nn][que.front().x2]=mins[que.front().r][que.front().x1][que.front().x2]+1;
                    que.push(state(map[tx-1][ty].nn,map[tx-2][ty].nn,que.front().x2));
                }
            }
            else if (i==1)
            {
                if (map[tx-2][ty].reach==1 && map[tx-2][ty].kind!=2 && mins[map[tx-1][ty].nn][que.front().x1][map[tx-2][ty].nn]==-1)
                {
                    mins[map[tx-1][ty].nn][que.front().x1][map[tx-2][ty].nn]=mins[que.front().r][que.front().x1][que.front().x2]+1;
                    que.push(state(map[tx-1][ty].nn,que.front().x1,map[tx-2][ty].nn));
                }
            }
        }
        if (map[tx+1][ty].reach==1 || (check(txx,txy) && map[tx+1][ty].kind==4))
        {
            if (check(txx,txy) && map[tx+1][ty].kind==4) return mins[que.front().r][que.front().x1][que.front().x2]+1;
            for (i=0;i!=xn;++i)
            {
                if (txx[i]==tx+1 && txy[i]==ty)
                {
                    break;
                }
            }
            if (i==xn)
            {
                if (mins[map[tx+1][ty].nn][que.front().x1][que.front().x2]==-1)
                {
                    mins[map[tx+1][ty].nn][que.front().x1][que.front().x2]=mins[que.front().r][que.front().x1][que.front().x2]+1;
                    que.push(state(map[tx+1][ty].nn,que.front().x1,que.front().x2));
                }
            }
            else if (i==0)
            {
                if (map[tx+2][ty].reach==1 && map[tx+2][ty].kind!=2 && mins[map[tx+1][ty].nn][map[tx+2][ty].nn][que.front().x2]==-1)
                {
                    mins[map[tx+1][ty].nn][map[tx+2][ty].nn][que.front().x2]=mins[que.front().r][que.front().x1][que.front().x2]+1;
                    que.push(state(map[tx+1][ty].nn,map[tx+2][ty].nn,que.front().x2));
                }
            }
            else if (i==1)
            {
                if (map[tx+2][ty].reach==1 && map[tx+2][ty].kind!=2 && mins[map[tx+1][ty].nn][que.front().x1][map[tx+2][ty].nn]==-1)
                {
                    mins[map[tx+1][ty].nn][que.front().x1][map[tx+2][ty].nn]=mins[que.front().r][que.front().x1][que.front().x2]+1;
                    que.push(state(map[tx+1][ty].nn,que.front().x1,map[tx+2][ty].nn));
                }
            }
        }
        if (map[tx][ty-1].reach==1 || (check(txx,txy) && map[tx][ty-1].kind==4))
        {
            if (check(txx,txy) && map[tx][ty-1].kind==4) return mins[que.front().r][que.front().x1][que.front().x2]+1;
            for (i=0;i!=xn;++i)
            {
                if (txx[i]==tx && txy[i]==ty-1)
                {
                    break;
                }
            }
            if (i==xn)
            {
                if (mins[map[tx][ty-1].nn][que.front().x1][que.front().x2]==-1)
                {
                    mins[map[tx][ty-1].nn][que.front().x1][que.front().x2]=mins[que.front().r][que.front().x1][que.front().x2]+1;
                    que.push(state(map[tx][ty-1].nn,que.front().x1,que.front().x2));
                }
            }
            else if (i==0)
            {
                if (map[tx][ty-2].reach==1 && map[tx][ty-2].kind!=2 && mins[map[tx][ty-1].nn][map[tx][ty-2].nn][que.front().x2]==-1)
                {
                    mins[map[tx][ty-1].nn][map[tx][ty-2].nn][que.front().x2]=mins[que.front().r][que.front().x1][que.front().x2]+1;
                    que.push(state(map[tx][ty-1].nn,map[tx][ty-2].nn,que.front().x2));
                }
            }
            else if (i==1)
            {
                if (map[tx][ty-2].reach==1 && map[tx][ty-2].kind!=2 && mins[map[tx][ty-1].nn][que.front().x1][map[tx][ty-2].nn]==-1)
                {
                    mins[map[tx][ty-1].nn][que.front().x1][map[tx][ty-2].nn]=mins[que.front().r][que.front().x1][que.front().x2]+1;
                    que.push(state(map[tx][ty-1].nn,que.front().x1,map[tx][ty-2].nn));
                }
            }
        }
        if (map[tx][ty+1].reach==1 || (check(txx,txy) && map[tx][ty+1].kind==4))
        {
            if (check(txx,txy) && map[tx][ty+1].kind==4) return mins[que.front().r][que.front().x1][que.front().x2]+1;
            for (i=0;i!=xn;++i)
            {
                if (txx[i]==tx && txy[i]==ty+1)
                {
                    break;
                }
            }
            if (i==xn)
            {
                if (mins[map[tx][ty+1].nn][que.front().x1][que.front().x2]==-1)
                {
                    mins[map[tx][ty+1].nn][que.front().x1][que.front().x2]=mins[que.front().r][que.front().x1][que.front().x2]+1;
                    que.push(state(map[tx][ty+1].nn,que.front().x1,que.front().x2));
                }
            }
            else if (i==0)
            {
                if (map[tx][ty+2].reach==1 && map[tx][ty+2].kind!=2 && mins[map[tx][ty+1].nn][map[tx][ty+2].nn][que.front().x2]==-1)
                {
                    mins[map[tx][ty+1].nn][map[tx][ty+2].nn][que.front().x2]=mins[que.front().r][que.front().x1][que.front().x2]+1;
                    que.push(state(map[tx][ty+1].nn,map[tx][ty+2].nn,que.front().x2));
                }
            }
            else if (i==1)
            {
                if (map[tx][ty+2].reach==1 && map[tx][ty+2].kind!=2 && mins[map[tx][ty+1].nn][que.front().x1][map[tx][ty+2].nn]==-1)
                {
                    mins[map[tx][ty+1].nn][que.front().x1][map[tx][ty+2].nn]=mins[que.front().r][que.front().x1][que.front().x2]+1;
                    que.push(state(map[tx][ty+1].nn,que.front().x1,map[tx][ty+2].nn));
                }
            }
        }
        for (i=0;i!=xn;++i)
        {
            map[txx[i]][txy[i]].kind=0;
        }
        que.pop();
    }
    return -1;
}

int main()
{
    int i,j,k,t1,t2,t3;
    char ss[105];
    scanf("%d",&n);
    for (t3=0;t3!=n;++t3)
    {
        scanf("%d%d",&h,&w);
        free_nn=0;
        bn=0;
        xn=0;
        memset(xx,0,sizeof(xx));
        memset(xy,0,sizeof(xy));
        memset(bx,0,sizeof(bx));
        memset(by,0,sizeof(by));
        for (i=0;i!=105;++i)
        {
            for (j=0;j!=105;++j)
            {
                for (k=0;k!=105;++k)
                {
                    mins[i][j][k]=-1;
                }
            }
        }
        for (i=0;i!=h;++i)
        {
            scanf("%s",ss);
            for (j=0;j!=w;++j)
            {
                if (ss[j]=='.')
                {
                    map[j][i].nn=free_nn;
                    nx[free_nn]=j;
                    ny[free_nn]=i;
                    ++free_nn;
                    map[j][i].reach=1;
                    map[j][i].kind=0;
                    map[j][i].if_b=0;
                }
                else if (ss[j]=='#')
                {
                    map[j][i].reach=0;
                    map[j][i].kind=1;
                    map[j][i].if_b=0;
                }
                else if (ss[j]=='B')
                {
                    map[j][i].nn=free_nn;
                    nx[free_nn]=j;
                    ny[free_nn]=i;
                    ++free_nn;
                    map[j][i].reach=1;
                    map[j][i].kind=0;
                    bx[bn]=j;
                    by[bn]=i;
                    map[j][i].if_b=1;
                    ++bn;
                }
                else if (ss[j]=='X')
                {
                    map[j][i].nn=free_nn;
                    nx[free_nn]=j;
                    ny[free_nn]=i;
                    ++free_nn;
                    map[j][i].reach=1;
                    map[j][i].kind=2;
                    xx[xn]=j;
                    xy[xn]=i;
                    map[j][i].if_b=0;
                    ++xn;
                }
                else if (ss[j]=='S')
                {
                    map[j][i].nn=free_nn;
                    nx[free_nn]=j;
                    ny[free_nn]=i;
                    ++free_nn;
                    map[j][i].reach=1;
                    map[j][i].kind=0;
                    map[j][i].if_b=0;
                    sx=j;
                    sy=i;
                }
                else if (ss[j]=='E')
                {
                    map[j][i].nn=free_nn;
                    nx[free_nn]=j;
                    ny[free_nn]=i;
                    ++free_nn;
                    map[j][i].reach=0;
                    map[j][i].kind=4;
                    map[j][i].if_b=0;
                    ex=j;
                    ey=i;
                }
            }
        }
        map[0][0].nn=free_nn;
        nx[free_nn]=0;
        ny[free_nn]=0;
        t1=BFS();
        if (t1!=-1) printf("%d\n",t1);
        else printf("impossible\n");
    }
}